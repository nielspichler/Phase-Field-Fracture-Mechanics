<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="model_8cpp" kind="file" language="C++">
    <compoundname>model.cpp</compoundname>
    <includes refid="model_8hpp" local="yes">model.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/student/Project_TEHPC/project-tehpc-niels-pichler/src/model.cpp</label>
        <link refid="model_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>phaseelement.hpp</label>
        <link refid="phaseelement_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>iomanip</label>
      </node>
      <node id="18">
        <label>array_inline.hpp</label>
        <link refid="array__inline_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>vector.hpp</label>
        <link refid="vector_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>matrix_inline.hpp</label>
        <link refid="matrix__inline_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>fstream</label>
      </node>
      <node id="12">
        <label>ostream</label>
      </node>
      <node id="14">
        <label>array.hpp</label>
        <link refid="array_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
      <node id="5">
        <label>sstream</label>
      </node>
      <node id="15">
        <label>base_matrix.hpp</label>
        <link refid="base__matrix_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>matrix.hpp</label>
        <link refid="matrix_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>math.h</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>newton_raphson_solver.hpp</label>
        <link refid="newton__raphson__solver_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>dispelement.hpp</label>
        <link refid="dispelement_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>common.hpp</label>
        <link refid="common_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>element.hpp</label>
        <link refid="element_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="model_8hpp" kindref="compound">model.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="class_model_1ac8d29cf23b87530eff5f25315ca54a42" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_model_1ac8d29cf23b87530eff5f25315ca54a42" kindref="member">Model::readInput</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>fname)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>character<sp/>used<sp/>to<sp/>designate<sp/>comment<sp/>in<sp/>input<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>comment_char<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>the<sp/>file<sp/>with<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>read_file(fname);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>assert(read_file.is_open());</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>file<sp/>as<sp/>long<sp/>as<sp/>there<sp/>is<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!read_file.eof())<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::getline(read_file,<sp/>line);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>comments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>found_comment<sp/>=<sp/>line.find_first_of(comment_char);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_comment<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>line.substr(0,found_comment);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.empty())</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>first<sp/>entry<sp/>of<sp/>line<sp/>-&gt;<sp/>keyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>sstr(line);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>keyword;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>keyword;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>depending<sp/>on<sp/>keyword<sp/>read<sp/>more<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyword<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$dimensions&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>dim;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyword<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$lc&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>lc;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyword<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$steps&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>steps;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyword<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$nodes&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>nb_nodes;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyword<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$elements&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>nb_elements;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyword<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$elementtype&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>tmp;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>nb_nodes_per_element;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>read_file.close();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>global<sp/>properties<sp/>were<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assert(dim<sp/>&gt;=<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assert(nb_nodes<sp/>&gt;=<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assert(nb_nodes_per_element<sp/>&gt;=<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assert(nb_elements<sp/>&gt;=<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assert(steps<sp/>&gt;=<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assert(lc<sp/>&gt;=<sp/>0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>arrays:<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>coordinates,<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>connectivity,<sp/>modulus,<sp/>cross_section,<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>bc_force,<sp/>bc_disp,<sp/>bc_disp_value</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>coordinates.<ref refid="class_array_1ae9e652d84186e4ef0293a30c7c4af3df" kindref="member">resize</ref>(nb_nodes,<sp/>dim);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>connectivity.<ref refid="class_array_1ae9e652d84186e4ef0293a30c7c4af3df" kindref="member">resize</ref>(nb_elements,<sp/>nb_nodes_per_element);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>modulus.resize(nb_elements);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>poisson.resize(nb_elements);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>gc.resize(nb_elements);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>BC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>bc_disp.<ref refid="class_array_1ae9e652d84186e4ef0293a30c7c4af3df" kindref="member">resize</ref>(nb_nodes,<sp/>dim);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>bc_disp_value.<ref refid="class_array_1ae9e652d84186e4ef0293a30c7c4af3df" kindref="member">resize</ref>(nb_nodes,<sp/>dim);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>BC<sp/>arrays<sp/>with<sp/>zero<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>bc_disp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>bc_disp_value=0.;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>input<sp/>file<sp/>again<sp/>and<sp/>read<sp/>array<sp/>values<sp/>(copy<sp/>and<sp/>modify<sp/>from<sp/>week<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>read_file.open(fname);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>assert(read_file.is_open());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>file<sp/>as<sp/>long<sp/>as<sp/>there<sp/>is<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!read_file.eof())<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::getline(read_file,<sp/>line);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>comments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>found_comment<sp/>=<sp/>line.find_first_of(comment_char);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_comment<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>line.substr(0,found_comment);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.empty())</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>first<sp/>entry<sp/>of<sp/>line<sp/>-&gt;<sp/>keyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>sstr(line);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>keyword;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>keyword;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>depending<sp/>on<sp/>keyword<sp/>read<sp/>more<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyword<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$node&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>idx;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>coordinates(idx-1,<sp/>0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>coordinates(idx-1,<sp/>1);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyword<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$element&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>idx;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>node;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connectivity(idx-1,<sp/>0)<sp/>=<sp/>node-1;<sp/></highlight><highlight class="comment">//<sp/>node<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>node;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connectivity(idx-1,<sp/>1)<sp/>=<sp/>node-1;<sp/></highlight><highlight class="comment">//<sp/>node<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>node;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connectivity(idx-1,<sp/>2)<sp/>=<sp/>node-1;<sp/></highlight><highlight class="comment">//<sp/>node<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>node;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connectivity(idx-1,<sp/>3)<sp/>=<sp/>node-1;<sp/></highlight><highlight class="comment">//<sp/>node<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etype;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>etype;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>modulus[idx-1];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>poisson[idx-1];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>gc[idx-1];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyword<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$bcd&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>tmp;<sp/></highlight><highlight class="comment">//<sp/>index<sp/>(not<sp/>used)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>node;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>dir;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&gt;&gt;<sp/>bc_disp_value(node-1,<sp/>dir-1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bc_disp(node-1,<sp/>dir-1)<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>ON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>read_file.close();</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="150"><highlight class="comment">void<sp/>Model::assembly()</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>//<sp/>initializing<sp/>local<sp/>stiffnes<sp/>matrix,<sp/>rotation<sp/>matrix</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>UInt<sp/>local_size<sp/>=<sp/>nb_nodes_per_element*dim;</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/>Matrix&lt;double&gt;<sp/>Ke(local_size,<sp/>local_size);</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/>//<sp/>initialze<sp/>and<sp/>fill<sp/>the<sp/>2D<sp/>array<sp/>for<sp/>mapping<sp/>local<sp/>indicies<sp/>to<sp/>global</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/>Matrix&lt;double&gt;<sp/>global_indices(nb_elements,<sp/>local_size);</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>//<sp/>global<sp/>numbering</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>for<sp/>(UInt<sp/>e<sp/>=<sp/>0;<sp/>e<sp/>&lt;<sp/>nb_elements;<sp/>++e)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(UInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nb_nodes_per_element;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(UInt<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/>global_indices(e,<sp/>2*i+j)<sp/>=<sp/>j<sp/>+<sp/>dim<sp/>*<sp/>connectivity(e,i);</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>//<sp/>precision<sp/>value<sp/>for<sp/>printing<sp/>on<sp/>the<sp/>terminal</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;global<sp/>indices&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>global_indices<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="172"><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/>//<sp/>for<sp/>loop<sp/>over<sp/>elements<sp/>starts<sp/>here</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/>for<sp/>(UInt<sp/>e<sp/>=<sp/>0;<sp/>e<sp/>&lt;<sp/>nb_elements;<sp/>++e)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>here:<sp/>call<sp/>the<sp/>&quot;localStiffness&quot;<sp/>function<sp/>to<sp/>fill<sp/>Ke</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/>localStiffness(e,<sp/>Ke);</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Assemble<sp/>the<sp/>globale<sp/>stiffness<sp/>matrix</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(UInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>local_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(UInt<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>local_size;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>gi<sp/>=<sp/>global_indices(e,<sp/>i);</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>gj<sp/>=<sp/>global_indices(e,<sp/>j);</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>(*K)(gi,<sp/>gj)<sp/>+=<sp/>Ke(i,<sp/>j);</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/>//<sp/>for<sp/>loop<sp/>over<sp/>elements<sp/>end<sp/>here</highlight></codeline>
<codeline lineno="189"><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment">}</highlight></codeline>
<codeline lineno="191"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="class_model_1a24d61f6d660c9a30da5795631e934f3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_model_1a24d61f6d660c9a30da5795631e934f3a" kindref="member">Model::apply_bc</ref>(){</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="class_model_1a74df995e0f6ec20b41cdca0a253e9c2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_model_1a74df995e0f6ec20b41cdca0a253e9c2a" kindref="member">Model::solve</ref>(){</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="class_model_1a8976f84f757eb3cd68b2aa7eeb5a345f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_model_1a8976f84f757eb3cd68b2aa7eeb5a345f" kindref="member">Model::update</ref>(){</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="class_model_1a6861375feb4cb55cdfa5a8b1a8d3bf6a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_model_1a6861375feb4cb55cdfa5a8b1a8d3bf6a" kindref="member">Model ::output</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>odir){</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Model::localStiffness(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>element,<sp/><ref refid="class_matrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;<sp/>Ke_d,<sp/>std::vector&lt;double&gt;<sp/><sp/>&amp;<sp/>res_d,<sp/><ref refid="class_matrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;<sp/>Ke_u,<sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>res_u)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>element;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resetting<sp/>local<sp/>stiffness<sp/>and<sp/>rotation<sp/>matrix<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>Ke_d<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>Ke_u<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>loc_coordinates(nb_nodes_per_element,<sp/>2);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>loc_d;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>loc_d.resize(nb_nodes_per_element);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>history</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>loc_H;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>loc_H.resize(nb_nodes_per_element);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>displacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>loc_u;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>loc_u.resize(2*nb_nodes_per_element);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><sp/>prop_fracture<sp/>=<sp/>{gc[e],<sp/>lc};</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><sp/>prop_elasticity<sp/>=<sp/>{modulus[e],<sp/>poisson[e]};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="common_8hpp_1a9cc0620fb2e91b51587c6936060d4161" kindref="member">UInt</ref><sp/>i<sp/>=<sp/>0;i&lt;nb_nodes_per_element;i++)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc_coordinates(i,0)<sp/>=<sp/>coordinates(connectivity(e,<sp/>i),0);</highlight><highlight class="comment">//<sp/>x_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc_coordinates(i,1)<sp/>=<sp/>coordinates(connectivity(e,<sp/>i),1);</highlight><highlight class="comment">//<sp/>y_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc_d[i]<sp/>=<sp/>phase[connectivity(e,<sp/>i)];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc_H[i]<sp/>=<sp/>history[connectivity(e,<sp/>i)];</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc_u[2*i]<sp/>=<sp/>displacement(connectivity(e,<sp/>i),<sp/>0);</highlight><highlight class="comment">//<sp/>u_1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc_u[2*i+1]<sp/>=<sp/>displacement(connectivity(e,<sp/>i),<sp/>1);</highlight><highlight class="comment">//<sp/>u_2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>element<sp/>is<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_phase_element" kindref="compound">PhaseElement</ref><sp/>el_d(loc_coordinates,<sp/>loc_d,<sp/>loc_H,<sp/>prop_fracture);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_disp_element" kindref="compound">DispElement</ref><sp/>el_u(loc_coordinates,<sp/>loc_d,<sp/>loc_u,<sp/>prop_elasticity);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Local<sp/>stiffness<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>el_d.GetStiffnessAndRes(Ke_d,<sp/>res_d);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>el_u.GetStiffnessAndRes(Ke_u,<sp/>res_u);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/student/Project_TEHPC/project-tehpc-niels-pichler/src/model.cpp"/>
  </compounddef>
</doxygen>
